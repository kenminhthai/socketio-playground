{"map":"{\"version\":3,\"sources\":[\"/Users/Kenmintae/Desktop/works/sample2/src/socketBuilder.js\"],\"names\":[\"__webpack_require__\"],\"mappings\":\"8MAAAA,EAAA\",\"sourcesContent\":[\"import * as io from \\\"socket.io\\\";\\n\\n// export default class Socket {\\n//   constructor(server, config) {\\n//     //server: http.server, config:KeyValuePair<any>\\n//     this.io = io(server, config[\\\"options\\\"]);\\n//   }\\n\\n//   get sockets() {\\n//     return this.io.sockets;\\n//   }\\n\\n//   get connected() {\\n//     return this.sockets.connected;\\n//   }\\n\\n//   getConnectedClients(rooms) {\\n//     if (!this.connected) return [];\\n//     if (rooms) {\\n//       if (!Array.isArray(rooms)) {\\n//         rooms = [rooms];\\n//       }\\n//       let clients = {};\\n\\n//       for (let roomId of rooms) {\\n//         let room = this.io.sockets.adapter.rooms[roomId];\\n\\n//         if (!room || !room.sockets) {\\n//           continue;\\n//         }\\n\\n//         for (let i in room.sockets) {\\n//           if (this.connected[i]) {\\n//             clients[i] = this.connected[i];\\n//           }\\n//         }\\n//       }\\n//       return _.values(clients);\\n//     }\\n//     return _.values(this.connected);\\n//   }\\n\\n//   emit(event, args) {\\n//     return this.io.emit(event, args);\\n//   }\\n\\n//   of(namespace) {\\n//     return this.io.of(namespace);\\n//   }\\n\\n//   to(room) {\\n//     return this.io.to(room);\\n//   }\\n\\n//   on(event, listener) {\\n//     this.io.on(event, listener);\\n//     return this;\\n//   }\\n// }\\n\\n// connect() {\\n//   var self = this;\\n//   if (self.socket) {\\n//     self.socket.destroy();\\n//     delete self.socket;\\n//     self.socket = null;\\n//   }\\n//   this.socket = io.connect(\\n//     \\\"http://127.0.0.1:3000\\\",\\n//     {\\n//       reconnection: true,\\n//       reconnectionDelay: 1000,\\n//       reconnectionDelayMax: 5000,\\n//       reconnectionAttempts: Infinity\\n//     }\\n//   );\\n//   this.socket.on(\\\"connect\\\", function() {\\n//     console.log(\\\"connected to server\\\");\\n//   });\\n//   this.socket.on(\\\"disconnect\\\", function() {\\n//     console.log(\\\"disconnected from server\\\");\\n//     window.setTimeout(\\\"app.connect()\\\", 5000);\\n//   });\\n// }\\n\"]}","code":"exports.id=0,exports.modules={76:function(t,e,r){\"use strict\";!function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);e.default=t}(r(77))}};","extractedComments":[]}